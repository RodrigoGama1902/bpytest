from dataclasses import dataclass
from enum import Enum
from pathlib import Path
from typing import Any

class CollectorString:
    collector_string: str
    unit: str
    directory: Path
    path: Path
    def __init__(self, collector_string: str) -> None: ...

@dataclass
class SessionInfo:
    id: int
    def __init__(self, id) -> None: ...

@dataclass
class BpyTestConfig:
    pythonpath: Path = ...
    nocapture: bool = ...
    module_list: str = ...
    blender_exe: Path | None = ...
    norecursedirs: list[str] = ...
    collector_string: str = ...
    keyword: str = ...
    def load_from_dict(self, data: dict[str, Any]): ...
    def load_from_pyproject_toml(self, pyproject_toml_path: Path): ...
    def as_dict(self) -> dict[str, Any]: ...
    def as_json(self) -> str: ...
    def __init__(self, pythonpath, nocapture, module_list, blender_exe, norecursedirs, collector_string, keyword) -> None: ...

class BColors(Enum):
    HEADER: str
    OKBLUE: str
    OKCYAN: str
    OKGREEN: str
    WARNING: str
    FAIL: str
    ENDC: str
    BOLD: str
    UNDERLINE: str
    BRIGHT: str
    WHITE: str

class TestUnit:
    function_name: str
    success: bool
    test_filepath: Path
    result_lines: list[str]
    collector_string: CollectorString
    selected: bool
    def __init__(self, test_filepath: Path, function_name: str) -> None: ...
    def print_log(self) -> None: ...

class TestFile:
    filepath: Path
    test_units: list[TestUnit]
    def __init__(self, filepath: Path) -> None: ...
    def select_by_collector_string(self, filter_collector_string: CollectorString) -> None: ...
    def select_by_keyword(self, keyword: str) -> None: ...
